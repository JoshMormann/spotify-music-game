# Task ID: 5
# Title: Design and Implement Game State Management
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create a state management system to track game progress, scores, rounds, and player actions.
# Details:
Implement game state management with the following features:

1. Game state data structure:
```typescript
interface GameState {
  gameId: string;
  players: Player[];
  currentRound: number;
  totalRounds: number;
  currentPrompt: Prompt;
  selectedTracks: {[playerId: string]: Track};
  roundWinner: Player | null;
  winningTrack: Track | null;
  scores: {[playerId: string]: number};
  gameWinner: Player | null;
  gameStatus: 'setup' | 'in-progress' | 'completed';
  history: Round[];
}

interface Player {
  id: string;
  name: string;
  hand: Track[];
  isComputer: boolean;
}

interface Prompt {
  id: string;
  text: string;
  comparisonType: 'popularity' | 'release_date' | 'duration' | 'title_length' | 'explicit' | 'featured_artists';
  comparisonDirection: 'highest' | 'lowest';
}

interface Round {
  roundNumber: number;
  prompt: Prompt;
  selections: {[playerId: string]: Track};
  winner: Player;
  winningTrack: Track;
}
```

2. Game state actions:
   - initializeGame(players): Set up new game
   - startRound(prompt): Begin new round with prompt
   - selectTrack(playerId, trackId): Record player's track selection
   - determineRoundWinner(): Compare tracks and determine winner
   - updateScore(playerId): Increment player's score
   - checkGameEnd(): Check if game end conditions are met
   - endGame(): Finalize game and determine winner

3. Persistence:
   - Save game state to local storage
   - Restore game in progress on app reload
   - Clear completed games after certain period

4. State access:
   - Create hooks/selectors for components to access game state
   - Implement memoization for derived state

# Test Strategy:
Unit test each game state action. Test game flow with simulated player actions. Verify score calculation and winner determination. Test persistence and restoration of game state. Test edge cases like ties and incomplete games.
