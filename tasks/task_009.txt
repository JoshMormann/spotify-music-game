# Task ID: 9
# Title: Implement Track Selection Interface
# Status: pending
# Dependencies: 8
# Priority: medium
# Description: Create an interface for selecting tracks from the chosen album, displaying track information in a visually appealing way.
# Details:
Implement the track selection interface with the following features:

1. Display all tracks from the selected album in a scrollable list
2. Show track title, duration, and track number
3. Implement hover and selection effects
4. Ensure the interface appears only after an album is selected

```jsx
const TrackSelectionInterface = () => {
  const { state, dispatch } = useGameContext();
  const { selectedAlbum, selectedTrack, currentTurn } = state;
  
  const handleTrackSelect = (track) => {
    if (currentTurn !== 'player') return;
    dispatch({ type: 'SELECT_TRACK', payload: track });
  };
  
  if (!selectedAlbum) return null;
  
  return (
    <div className="track-selection-container">
      <h3>Select a Track</h3>
      <TrackList>
        {selectedAlbum.tracks.map((track) => (
          <TrackItem
            key={track.id}
            onClick={() => handleTrackSelect(track)}
            className={selectedTrack?.id === track.id ? 'selected' : ''}
          >
            <TrackNumber>{track.track_number}</TrackNumber>
            <TrackTitle>{track.name}</TrackTitle>
            <TrackDuration>{formatDuration(track.duration_ms)}</TrackDuration>
          </TrackItem>
        ))}
      </TrackList>
    </div>
  );
};

const TrackList = styled.div`
  background: rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  padding: 10px;
  max-height: 300px;
  overflow-y: auto;
  box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);
`;

const TrackItem = styled.div`
  display: flex;
  align-items: center;
  padding: 8px 12px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease;
  
  &:hover {
    background-color: rgba(0, 0, 0, 0.1);
  }
  
  &.selected {
    background-color: rgba(0, 0, 0, 0.2);
    font-weight: bold;
  }
`;
```

Implement a function to format track duration from milliseconds to MM:SS format.

# Test Strategy:
Test the interface with albums containing different numbers of tracks. Verify track selection correctly updates the game state. Test edge cases like albums with very long track titles or many tracks. Ensure the interface is accessible via keyboard navigation.

# Subtasks:
## 1. Create formatDuration utility function [pending]
### Dependencies: None
### Description: Implement a utility function that converts track duration from milliseconds to MM:SS format
### Details:
Create a utility function called formatDuration that takes a duration in milliseconds as input and returns a string in MM:SS format. The function should handle edge cases such as single-digit seconds (pad with leading zero) and handle hours if needed. This function will be used to display track durations in a readable format.

## 2. Implement styled components for track list [pending]
### Dependencies: None
### Description: Create and style the components needed for the track selection interface
### Details:
Implement the styled components for the track selection interface including TrackList, TrackItem, TrackNumber, TrackTitle, and TrackDuration. Ensure they follow the design specifications with proper spacing, colors, and hover effects. The TrackList should have a scrollable container with a max height, and TrackItems should have hover and selection states.

## 3. Create track selection logic [pending]
### Dependencies: None
### Description: Implement the logic for selecting tracks and updating the game state
### Details:
Implement the handleTrackSelect function that dispatches the SELECT_TRACK action to the game context when a track is clicked. Ensure that tracks can only be selected during the player's turn by checking the currentTurn state. The function should update the selectedTrack in the game state.

## 4. Build TrackSelectionInterface component [pending]
### Dependencies: 9.1, 9.2, 9.3
### Description: Assemble the main component that displays the track selection interface
### Details:
Create the TrackSelectionInterface component that conditionally renders based on whether an album is selected. The component should display a header and the list of tracks from the selected album. Each track should display its number, title, and formatted duration. Implement the logic to highlight the currently selected track.

## 5. Add accessibility and UX enhancements [pending]
### Dependencies: 9.4
### Description: Improve the track selection interface with accessibility features and UX improvements
### Details:
Enhance the track selection interface with keyboard navigation support, proper ARIA attributes, and focus management. Add visual indicators for the current track being played (if applicable). Implement smooth animations for hover and selection states. Add tooltips for tracks with long titles that might be truncated. Ensure the interface is responsive and works well on different screen sizes.

